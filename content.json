{"meta":{"title":"果果家","subtitle":"记录中","description":null,"author":"Zhang Yuan","url":"http://blog.guoguojia.net"},"pages":[{"title":"categories","date":"2019-01-01T10:10:35.000Z","updated":"2019-01-01T10:11:08.391Z","comments":false,"path":"categories/index.html","permalink":"http://blog.guoguojia.net/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-01T10:09:29.000Z","updated":"2019-01-01T10:10:25.483Z","comments":false,"path":"tags/index.html","permalink":"http://blog.guoguojia.net/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Laravel最佳实践","slug":"laravel-best-practices","date":"2019-01-03T03:42:41.000Z","updated":"2019-01-03T07:03:48.270Z","comments":true,"path":"2019/01/03/laravel-best-practices/","link":"","permalink":"http://blog.guoguojia.net/2019/01/03/laravel-best-practices/","excerpt":"","text":"翻译自：https://github.com/alexeymezenin/laravel-best-practices contents单一责任原则胖模型，瘦控制器校验业务逻辑应该写在服务类中不要重复自己的代码(DRY)尽量使用Eloquent与collections做数据库查询批量赋值不要在Blade模板中做查询，使用实时加载(N+1问题)给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释Blade模板中不要加JS和CSS，不要在PHP类中加HTML使用配置、语言文件和定义常量来取代代码中的文字使用被社区广为接受的标准Laravel工具遵循Laravel命名规范在可能的地方使用更短可读性更强的句法用控制反转容器或门面来取代new一个新的对象不要直接从.env文件中读取数据以标准格式存储数据，使用存取器和变异器来修改日期格式其他好的实践 single-responsibility-principle单一责任原则一个类，一个方法应该只做一件事情 不好的做法： 12345678public function getFullNameAttribute()&#123; if (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole('client') &amp;&amp; auth()-&gt;user()-&gt;isVerified()) &#123; return 'Mr. ' . $this-&gt;first_name . ' ' . $this-&gt;middle_name . ' ' . $this-&gt;last_name; &#125; else &#123; return $this-&gt;first_name[0] . '. ' . $this-&gt;last_name; &#125;&#125; 好的做法： 12345678910111213141516171819public function getFullNameAttribute()&#123; return $this-&gt;isVerifiedClient() ? $this-&gt;getFullNameLong() : $this-&gt;getFullNameShort();&#125;public function isVerifiedClient()&#123; return auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole('client') &amp;&amp; auth()-&gt;user()-&gt;isVerified();&#125;public function getFullNameLong()&#123; return 'Mr. ' . $this-&gt;first_name . ' ' . $this-&gt;middle_name . ' ' . $this-&gt;last_name;&#125;public function getFullNameShort()&#123; return $this-&gt;first_name[0] . '. ' . $this-&gt;last_name;&#125; 🔝 回到顶部 fat-models-skinny-controllers胖模型，瘦控制器不要使用查询构造器或SQL语句来查询数据库，把所有有关数据库操作的代码写在Eloquent模型或Repository类中 不好的做法： 12345678910public function index()&#123; $clients = Client::verified() -&gt;with(['orders' =&gt; function ($q) &#123; $q-&gt;where('created_at', '&gt;', Carbon::today()-&gt;subWeek()); &#125;]) -&gt;get(); return view('index', ['clients' =&gt; $clients]);&#125; 好的做法： 12345678910111213141516public function index()&#123; return view('index', ['clients' =&gt; $this-&gt;client-&gt;getWithNewOrders()]);&#125;class Client extends Model&#123; public function getWithNewOrders() &#123; return $this-&gt;verified() -&gt;with(['orders' =&gt; function ($q) &#123; $q-&gt;where('created_at', '&gt;', Carbon::today()-&gt;subWeek()); &#125;]) -&gt;get(); &#125;&#125; 🔝 回到顶部 validation校验把表单校验逻辑从控制器挪到请求类中 不好的做法 12345678910public function store(Request $request)&#123; $request-&gt;validate([ 'title' =&gt; 'required|unique:posts|max:255', 'body' =&gt; 'required', 'publish_at' =&gt; 'nullable|date', ]); ....&#125; 好的做法： 12345678910111213141516public function store(PostRequest $request)&#123; ....&#125;class PostRequest extends Request&#123; public function rules() &#123; return [ 'title' =&gt; 'required|unique:posts|max:255', 'body' =&gt; 'required', 'publish_at' =&gt; 'nullable|date', ]; &#125;&#125; 🔝 回到顶部 business-logic-should-be-in-service-class业务逻辑应该写在服务类中一个控制器必须只做一件事情，因此把业务逻辑从控制器挪到服务类中 不好的做法： 12345678public function store(Request $request)&#123; if ($request-&gt;hasFile('image')) &#123; $request-&gt;file('image')-&gt;move(public_path('images') . 'temp'); &#125; ....&#125; 好的做法： 12345678910111213141516public function store(Request $request)&#123; $this-&gt;articleService-&gt;handleUploadedImage($request-&gt;file('image')); ....&#125;class ArticleService&#123; public function handleUploadedImage($image) &#123; if (!is_null($image)) &#123; $image-&gt;move(public_path('images') . 'temp'); &#125; &#125;&#125; 🔝 回到顶部 dont-repeat-yourself-dry不要重复自己的代码(DRY)尽可能的复用代码，包括blade模板中的代码和使用Eloquent scope 不好的做法： 1234567891011public function getActive()&#123; return $this-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at')-&gt;get();&#125;public function getArticles()&#123; return $this-&gt;whereHas('user', function ($q) &#123; $q-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at'); &#125;)-&gt;get();&#125; 好的做法： 12345678910111213141516public function scopeActive($q)&#123; return $q-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at');&#125;public function getActive()&#123; return $this-&gt;active()-&gt;get();&#125;public function getArticles()&#123; return $this-&gt;whereHas('user', function ($q) &#123; $q-&gt;active(); &#125;)-&gt;get();&#125; 🔝 回到顶部 Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays尽量使用Eloquent与collections做数据库查询Eloquent让你可以写出可读性强、可维护性强的代码，它还支持软删除、事件操作等等优势 不好的做法： 123456789101112SELECT *FROM `articles`WHERE EXISTS (SELECT * FROM `users` WHERE `articles`.`user_id` = `users`.`id` AND EXISTS (SELECT * FROM `profiles` WHERE `profiles`.`user_id` = `users`.`id`) AND `users`.`deleted_at` IS NULL)AND `verified` = '1'AND `active` = '1'ORDER BY `created_at` DESC 好的做法： 1Article::has('user.profile')-&gt;verified()-&gt;latest()-&gt;get(); 🔝 回到顶部 Mass assignment批量赋值不好的做法： 1234567$article = new Article;$article-&gt;title = $request-&gt;title;$article-&gt;content = $request-&gt;content;$article-&gt;verified = $request-&gt;verified;// Add category to article$article-&gt;category_id = $category-&gt;id;$article-&gt;save(); 好的做法： 1$category-&gt;article()-&gt;create($request-&gt;all()); 🔝 回到顶部 Do not execute queries in Blade templates and use eager loading (N + 1 problem)不要在Blade模板中做查询，使用实时加载(N+1问题)不好的做法（对于100个用户，做了101次查询）： 123@foreach (User::all() as $user) &#123;&#123; $user-&gt;profile-&gt;name &#125;&#125;@endforeach 好的做法（对于100个用户，只做了两次查询）： 1234567$users = User::with('profile')-&gt;get();...@foreach ($users as $user) &#123;&#123; $user-&gt;profile-&gt;name &#125;&#125;@endforeach 🔝 回到顶部 Comment your code, but prefer descriptive method and variable names over comments给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释不好的做法： 1if (count((array) $builder-&gt;getQuery()-&gt;joins) &gt; 0) 好一些的做法： 12// Determine if there are any joins.if (count((array) $builder-&gt;getQuery()-&gt;joins) &gt; 0) 很好的做法： 1if ($this-&gt;hasJoins()) 🔝 回到顶部 Do not put JS and CSS in Blade templates and do not put any HTML in PHP classesBlade模板中不要加JS和CSS，不要在PHP类中加HTML不好的做法： 1let article = `&#123;&#123; json_encode($article) &#125;&#125;`; 好一些的做法： 12345&lt;input id=\"article\" type=\"hidden\" value=\"@json($article)\"&gt;Or&lt;button class=\"js-fav-article\" data-article=\"@json($article)\"&gt;&#123;&#123; $article-&gt;name &#125;&#125;&lt;button&gt; 在Javascript文件中： 1let article = $('#article').val(); 最好用专门的代码在PHP端包装数据，在JS端解析数据 🔝 回到顶部 Use config and language files, constants instead of text in the code使用配置、语言文件和定义常量来取代代码中的文字不好的做法： 123456public function isNormal()&#123; return $article-&gt;type === 'normal';&#125;return back()-&gt;with('message', 'Your article has been added!'); 好的做法： 123456public function isNormal()&#123; return $article-&gt;type === Article::TYPE_NORMAL;&#125;return back()-&gt;with('message', __('app.article_added')); 🔝 回到顶部 Use standard Laravel tools accepted by community使用被社区广为接受的标准Laravel工具不要任意使用第三方的包和工具，要选用被社区广为接受的标准Laravel工具，不要坑你的客户 任务 标准工具 第三方工具 Authorization Policies Entrust, Sentinel and other packages Compiling assets Laravel Mix Grunt, Gulp, 3rd party packages Development Environment Homestead Docker Deployment Laravel Forge Deployer and other solutions Unit testing PHPUnit, Mockery Phpspec Browser testing Laravel Dusk Codeception DB Eloquent SQL, Doctrine Templates Blade Twig Working with data Laravel collections Arrays Form validation Request classes 3rd party packages, validation in controller Authentication Built-in 3rd party packages, your own solution API authentication Laravel Passport 3rd party JWT and OAuth packages Creating API Built-in Dingo API and similar packages Working with DB structure Migrations Working with DB structure directly Localization Built-in 3rd party packages Realtime user interfaces Laravel Echo, Pusher 3rd party packages and working with WebSockets directly Generating testing data Seeder classes, Model Factories, Faker Creating testing data manually Task scheduling Laravel Task Scheduler Scripts and 3rd party packages DB MySQL, PostgreSQL, SQLite, SQL Server MongoDB 🔝 回到顶部 Follow Laravel naming conventions遵循Laravel命名规范遵循PSR规范 PSR标准 同时遵循Laravel社区接受的命名传统 称呼什么 怎么样的 好的 不好的 Controller singular ArticleController ArticlesController Route plural articles/1 article/1 Named route snake_case with dot notation users.show_active users.show-active, show-active-users Model singular User Users hasOne or belongsTo relationship singular articleComment articleComments, article_comment All other relationships plural articleComments articleComment, article_comments Table plural article_comments article_comment, articleComments Pivot table singular model names in alphabetical order article_user user_article, articles_users Table column snake_case without model name meta_title MetaTitle; article_meta_title Model property snake_case $model-&gt;created_at $model-&gt;createdAt Foreign key singular model name with _id suffix article_id ArticleId, id_article, articles_id Primary key - id custom_id Migration - 2017_01_01_000000_create_articles_table 2017_01_01_000000_articles Method camelCase getAll get_all Method in resource controller table store saveArticle Method in test class camelCase testGuestCannotSeeArticle test_guest_cannot_see_article Variable camelCase $articlesWithAuthor $articles_with_author Collection descriptive, plural $activeUsers = User::active()-&gt;get() $active, $data Object descriptive, singular $activeUser = User::active()-&gt;first() $users, $obj Config and language files index snake_case articles_enabled ArticlesEnabled; articles-enabled View snake_case show_filtered.blade.php showFiltered.blade.php, show-filtered.blade.php Config snake_case google_calendar.php googleCalendar.php, google-calendar.php Contract (interface) adjective or noun Authenticatable AuthenticationInterface, IAuthentication Trait adjective Notifiable NotificationTrait 🔝 回到顶部 Use shorter and more readable syntax where possible在可能的地方使用更短可读性更强的句法不好的做法： 12$request-&gt;session()-&gt;get('cart');$request-&gt;input('name'); 好的做法： 12session('cart');$request-&gt;name; 更多的例子： 一般的句法 短小精悍的句法 Session::get(&#39;cart&#39;) session(&#39;cart&#39;) $request-&gt;session()-&gt;get(&#39;cart&#39;) session(&#39;cart&#39;) Session::put(&#39;cart&#39;, $data) session([&#39;cart&#39; =&gt; $data]) $request-&gt;input(&#39;name&#39;), Request::get(&#39;name&#39;) $request-&gt;name, request(&#39;name&#39;) return Redirect::back() return back() is_null($object-&gt;relation) ? null : $object-&gt;relation-&gt;id optional($object-&gt;relation)-&gt;id return view(&#39;index&#39;)-&gt;with(&#39;title&#39;, $title)-&gt;with(&#39;client&#39;, $client) return view(&#39;index&#39;, compact(&#39;title&#39;, &#39;client&#39;)) $request-&gt;has(&#39;value&#39;) ? $request-&gt;value : &#39;default&#39;; $request-&gt;get(&#39;value&#39;, &#39;default&#39;) Carbon::now(), Carbon::today() now(), today() App::make(&#39;Class&#39;) app(&#39;Class&#39;) -&gt;where(&#39;column&#39;, &#39;=&#39;, 1) -&gt;where(&#39;column&#39;, 1) -&gt;orderBy(&#39;created_at&#39;, &#39;desc&#39;) -&gt;latest() -&gt;orderBy(&#39;age&#39;, &#39;desc&#39;) -&gt;latest(&#39;age&#39;) -&gt;orderBy(&#39;created_at&#39;, &#39;asc&#39;) -&gt;oldest() -&gt;select(&#39;id&#39;, &#39;name&#39;)-&gt;get() -&gt;get([&#39;id&#39;, &#39;name&#39;]) -&gt;first()-&gt;name -&gt;value(&#39;name&#39;) 🔝 回到顶部 Use IoC container or facades instead of new Class用控制反转容器或门面来取代new一个新的对象new一个新的对象的这种做法造成了类与复杂测试之间的强耦合，尽量使用控制反转或门面 不好的做法： 12$user = new User;$user-&gt;create($request-&gt;all()); 好的做法： 12345678public function __construct(User $user)&#123; $this-&gt;user = $user;&#125;....$this-&gt;user-&gt;create($request-&gt;all()); 🔝 回到顶部 Do not get data from the .env file directly不要直接从.env文件中读取数据把.env文件中的数据先传递到config文件中，再在应用中通过config()帮助方法使用 不好的做法： 1$apiKey = env('API_KEY'); 好的做法： 12345// config/api.php'key' =&gt; env('API_KEY'),// Use the data$apiKey = config('api.key'); 🔝 回到顶部 Store dates in the standard format. Use accessors and mutators to modify date format以标准格式存储数据，使用存取器和变异器来修改日期格式不好的做法： 12&#123;&#123; Carbon::createFromFormat('Y-d-m H-i', $object-&gt;ordered_at)-&gt;toDateString() &#125;&#125;&#123;&#123; Carbon::createFromFormat('Y-d-m H-i', $object-&gt;ordered_at)-&gt;format('m-d') &#125;&#125; 好的做法： 12345678910// Modelprotected $dates = ['ordered_at', 'created_at', 'updated_at']public function getSomeDateAttribute($date)&#123; return $date-&gt;format('m-d');&#125;// View&#123;&#123; $object-&gt;ordered_at-&gt;toDateString() &#125;&#125;&#123;&#123; $object-&gt;ordered_at-&gt;some_date &#125;&#125; 🔝 回到顶部 Other good practices其他好的实践不要在路径文件里写任何的逻辑 Blade模板中尽量不要使用原生的PHP语法 🔝 回到顶部","categories":[],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"http://blog.guoguojia.net/tags/Laravel/"},{"name":"实践","slug":"实践","permalink":"http://blog.guoguojia.net/tags/实践/"}]},{"title":"这是第一篇测试文章","slug":"first-post","date":"2019-01-01T08:56:33.000Z","updated":"2019-01-01T08:56:33.989Z","comments":true,"path":"2019/01/01/first-post/","link":"","permalink":"http://blog.guoguojia.net/2019/01/01/first-post/","excerpt":"","text":"测试这里是第一篇文章","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.guoguojia.net/categories/Hexo/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://blog.guoguojia.net/tags/测试/"},{"name":"MD","slug":"MD","permalink":"http://blog.guoguojia.net/tags/MD/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-01T08:41:05.054Z","updated":"2019-01-01T08:41:05.054Z","comments":true,"path":"2019/01/01/hello-world/","link":"","permalink":"http://blog.guoguojia.net/2019/01/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}