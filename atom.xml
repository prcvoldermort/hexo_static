<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>果果家</title>
  <icon>https://www.gravatar.com/avatar/cc19aa279b333d1b16a1becc98fefbbf</icon>
  <subtitle>记录中</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.guoguojia.net/"/>
  <updated>2019-01-03T07:03:48.270Z</updated>
  <id>http://blog.guoguojia.net/</id>
  
  <author>
    <name>Zhang Yuan</name>
    <email>prcvoldermort@icloud.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel最佳实践</title>
    <link href="http://blog.guoguojia.net/2019/01/03/laravel-best-practices/"/>
    <id>http://blog.guoguojia.net/2019/01/03/laravel-best-practices/</id>
    <published>2019-01-03T03:42:41.000Z</published>
    <updated>2019-01-03T07:03:48.270Z</updated>
    
    <content type="html"><![CDATA[<p>翻译自：<a href="https://github.com/alexeymezenin/laravel-best-practices" target="_blank" rel="noopener">https://github.com/alexeymezenin/laravel-best-practices</a>  </p><h2 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h2><p><a href="#single-responsibility-principle">单一责任原则</a><br><a href="#fat-models-skinny-controllers">胖模型，瘦控制器</a><br><a href="#validation">校验</a><br><a href="#business-logic-should-be-in-service-class">业务逻辑应该写在服务类中</a><br><a href="#dont-repeat-yourself-dry">不要重复自己的代码(DRY)</a><br><a href="#prefer-to-use-eloquent-over-using-query-builder-and-raw-sql-queries-prefer-collections-over-arrays">尽量使用Eloquent与collections做数据库查询</a><br><a href="#mass-assignment">批量赋值</a><br><a href="#do-not-execute-queries-in-blade-templates-and-use-eager-loading-n--1-problem">不要在Blade模板中做查询，使用实时加载(N+1问题)</a><br><a href="#comment-your-code-but-prefer-descriptive-method-and-variable-names-over-comments">给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释</a><br><a href="#do-not-put-js-and-css-in-blade-templates-and-do-not-put-any-html-in-php-classes">Blade模板中不要加JS和CSS，不要在PHP类中加HTML</a><br><a href="#use-config-and-language-files-constants-instead-of-text-in-the-code">使用配置、语言文件和定义常量来取代代码中的文字</a><br><a href="#use-standard-laravel-tools-accepted-by-community">使用被社区广为接受的标准Laravel工具</a><br><a href="#follow-laravel-naming-conventions">遵循Laravel命名规范</a><br><a href="#use-shorter-and-more-readable-syntax-where-possible">在可能的地方使用更短可读性更强的句法</a><br><a href="#use-ioc-container-or-facades-instead-of-new-class">用控制反转容器或门面来取代new一个新的对象</a><br><a href="#do-not-get-data-from-the-env-file-directly">不要直接从.env文件中读取数据</a><br><a href="#store-dates-in-the-standard-format-use-accessors-and-mutators-to-modify-date-format">以标准格式存储数据，使用存取器和变异器来修改日期格式</a><br><a href="#other-good-practices">其他好的实践</a>  </p><h3 id="single-responsibility-principle"><a href="#single-responsibility-principle" class="headerlink" title="single-responsibility-principle"></a>single-responsibility-principle</h3><h3 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h3><p>一个类，一个方法应该只做一件事情  </p><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFullNameAttribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole(<span class="string">'client'</span>) &amp;&amp; auth()-&gt;user()-&gt;isVerified()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Mr. '</span> . <span class="keyword">$this</span>-&gt;first_name . <span class="string">' '</span> . <span class="keyword">$this</span>-&gt;middle_name . <span class="string">' '</span> . <span class="keyword">$this</span>-&gt;last_name;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;first_name[<span class="number">0</span>] . <span class="string">'. '</span> . <span class="keyword">$this</span>-&gt;last_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFullNameAttribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;isVerifiedClient() ? <span class="keyword">$this</span>-&gt;getFullNameLong() : <span class="keyword">$this</span>-&gt;getFullNameShort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVerifiedClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole(<span class="string">'client'</span>) &amp;&amp; auth()-&gt;user()-&gt;isVerified();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFullNameLong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Mr. '</span> . <span class="keyword">$this</span>-&gt;first_name . <span class="string">' '</span> . <span class="keyword">$this</span>-&gt;middle_name . <span class="string">' '</span> . <span class="keyword">$this</span>-&gt;last_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFullNameShort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;first_name[<span class="number">0</span>] . <span class="string">'. '</span> . <span class="keyword">$this</span>-&gt;last_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="fat-models-skinny-controllers"><a href="#fat-models-skinny-controllers" class="headerlink" title="fat-models-skinny-controllers"></a>fat-models-skinny-controllers</h3><h3 id="胖模型，瘦控制器"><a href="#胖模型，瘦控制器" class="headerlink" title="胖模型，瘦控制器"></a>胖模型，瘦控制器</h3><p>不要使用查询构造器或SQL语句来查询数据库，把所有有关数据库操作的代码写在Eloquent模型或Repository类中</p><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $clients = Client::verified()</span><br><span class="line">        -&gt;with([<span class="string">'orders'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($q)</span> </span>&#123;</span><br><span class="line">            $q-&gt;where(<span class="string">'created_at'</span>, <span class="string">'&gt;'</span>, Carbon::today()-&gt;subWeek());</span><br><span class="line">        &#125;])</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'index'</span>, [<span class="string">'clients'</span> =&gt; $clients]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'index'</span>, [<span class="string">'clients'</span> =&gt; <span class="keyword">$this</span>-&gt;client-&gt;getWithNewOrders()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWithNewOrders</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;verified()</span><br><span class="line">            -&gt;with([<span class="string">'orders'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($q)</span> </span>&#123;</span><br><span class="line">                $q-&gt;where(<span class="string">'created_at'</span>, <span class="string">'&gt;'</span>, Carbon::today()-&gt;subWeek());</span><br><span class="line">            &#125;])</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="validation"><a href="#validation" class="headerlink" title="validation"></a>validation</h3><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>把表单校验逻辑从控制器挪到请求类中</p><p>不好的做法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $request-&gt;validate([</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'required|unique:posts|max:255'</span>,</span><br><span class="line">        <span class="string">'body'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">        <span class="string">'publish_at'</span> =&gt; <span class="string">'nullable|date'</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(PostRequest $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRequest</span> <span class="keyword">extends</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'title'</span> =&gt; <span class="string">'required|unique:posts|max:255'</span>,</span><br><span class="line">            <span class="string">'body'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'publish_at'</span> =&gt; <span class="string">'nullable|date'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="business-logic-should-be-in-service-class"><a href="#business-logic-should-be-in-service-class" class="headerlink" title="business-logic-should-be-in-service-class"></a>business-logic-should-be-in-service-class</h3><h3 id="业务逻辑应该写在服务类中"><a href="#业务逻辑应该写在服务类中" class="headerlink" title="业务逻辑应该写在服务类中"></a>业务逻辑应该写在服务类中</h3><p>一个控制器必须只做一件事情，因此把业务逻辑从控制器挪到服务类中</p><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($request-&gt;hasFile(<span class="string">'image'</span>)) &#123;</span><br><span class="line">        $request-&gt;file(<span class="string">'image'</span>)-&gt;move(public_path(<span class="string">'images'</span>) . <span class="string">'temp'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;articleService-&gt;handleUploadedImage($request-&gt;file(<span class="string">'image'</span>));</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleUploadedImage</span><span class="params">($image)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_null($image)) &#123;</span><br><span class="line">            $image-&gt;move(public_path(<span class="string">'images'</span>) . <span class="string">'temp'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="dont-repeat-yourself-dry"><a href="#dont-repeat-yourself-dry" class="headerlink" title="dont-repeat-yourself-dry"></a>dont-repeat-yourself-dry</h3><h3 id="不要重复自己的代码-DRY"><a href="#不要重复自己的代码-DRY" class="headerlink" title="不要重复自己的代码(DRY)"></a>不要重复自己的代码(DRY)</h3><p>尽可能的复用代码，包括blade模板中的代码和使用Eloquent scope</p><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getActive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;where(<span class="string">'verified'</span>, <span class="number">1</span>)-&gt;whereNotNull(<span class="string">'deleted_at'</span>)-&gt;get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArticles</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;whereHas(<span class="string">'user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($q)</span> </span>&#123;</span><br><span class="line">            $q-&gt;where(<span class="string">'verified'</span>, <span class="number">1</span>)-&gt;whereNotNull(<span class="string">'deleted_at'</span>);</span><br><span class="line">        &#125;)-&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeActive</span><span class="params">($q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $q-&gt;where(<span class="string">'verified'</span>, <span class="number">1</span>)-&gt;whereNotNull(<span class="string">'deleted_at'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getActive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;active()-&gt;get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArticles</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;whereHas(<span class="string">'user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($q)</span> </span>&#123;</span><br><span class="line">            $q-&gt;active();</span><br><span class="line">        &#125;)-&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Prefer-to-use-Eloquent-over-using-Query-Builder-and-raw-SQL-queries-Prefer-collections-over-arrays"><a href="#Prefer-to-use-Eloquent-over-using-Query-Builder-and-raw-SQL-queries-Prefer-collections-over-arrays" class="headerlink" title="Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays"></a><strong>Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays</strong></h3><h3 id="尽量使用Eloquent与collections做数据库查询"><a href="#尽量使用Eloquent与collections做数据库查询" class="headerlink" title="尽量使用Eloquent与collections做数据库查询"></a>尽量使用Eloquent与collections做数据库查询</h3><p>Eloquent让你可以写出可读性强、可维护性强的代码，它还支持软删除、事件操作等等优势</p><p>不好的做法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`articles`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> *</span><br><span class="line">              <span class="keyword">FROM</span> <span class="string">`users`</span></span><br><span class="line">              <span class="keyword">WHERE</span> <span class="string">`articles`</span>.<span class="string">`user_id`</span> = <span class="string">`users`</span>.<span class="string">`id`</span></span><br><span class="line">              <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> *</span><br><span class="line">                          <span class="keyword">FROM</span> <span class="string">`profiles`</span></span><br><span class="line">                          <span class="keyword">WHERE</span> <span class="string">`profiles`</span>.<span class="string">`user_id`</span> = <span class="string">`users`</span>.<span class="string">`id`</span>) </span><br><span class="line">              <span class="keyword">AND</span> <span class="string">`users`</span>.<span class="string">`deleted_at`</span> <span class="keyword">IS</span> <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">AND</span> <span class="string">`verified`</span> = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">`active`</span> = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`created_at`</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Article::has(<span class="string">'user.profile'</span>)-&gt;verified()-&gt;latest()-&gt;get();</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Mass-assignment"><a href="#Mass-assignment" class="headerlink" title="Mass assignment"></a><strong>Mass assignment</strong></h3><h3 id="批量赋值"><a href="#批量赋值" class="headerlink" title="批量赋值"></a>批量赋值</h3><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$article = <span class="keyword">new</span> Article;</span><br><span class="line">$article-&gt;title = $request-&gt;title;</span><br><span class="line">$article-&gt;content = $request-&gt;content;</span><br><span class="line">$article-&gt;verified = $request-&gt;verified;</span><br><span class="line"><span class="comment">// Add category to article</span></span><br><span class="line">$article-&gt;category_id = $category-&gt;id;</span><br><span class="line">$article-&gt;save();</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$category-&gt;article()-&gt;create($request-&gt;all());</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Do-not-execute-queries-in-Blade-templates-and-use-eager-loading-N-1-problem"><a href="#Do-not-execute-queries-in-Blade-templates-and-use-eager-loading-N-1-problem" class="headerlink" title="Do not execute queries in Blade templates and use eager loading (N + 1 problem)"></a><strong>Do not execute queries in Blade templates and use eager loading (N + 1 problem)</strong></h3><h3 id="不要在Blade模板中做查询，使用实时加载-N-1问题"><a href="#不要在Blade模板中做查询，使用实时加载-N-1问题" class="headerlink" title="不要在Blade模板中做查询，使用实时加载(N+1问题)"></a>不要在Blade模板中做查询，使用实时加载(N+1问题)</h3><p>不好的做法（对于100个用户，做了101次查询）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> (User::all() <span class="keyword">as</span> $user)</span><br><span class="line">    &#123;&#123; $user-&gt;profile-&gt;name &#125;&#125;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure><p>好的做法（对于100个用户，只做了两次查询）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$users = User::with(<span class="string">'profile'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    &#123;&#123; $user-&gt;profile-&gt;name &#125;&#125;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Comment-your-code-but-prefer-descriptive-method-and-variable-names-over-comments"><a href="#Comment-your-code-but-prefer-descriptive-method-and-variable-names-over-comments" class="headerlink" title="Comment your code, but prefer descriptive method and variable names over comments"></a><strong>Comment your code, but prefer descriptive method and variable names over comments</strong></h3><h3 id="给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释"><a href="#给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释" class="headerlink" title="给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释"></a>给代码添加注释，尽量使用描述性的方法和变量名来取代代码注释</h3><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (count((<span class="keyword">array</span>) $builder-&gt;getQuery()-&gt;joins) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>好一些的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Determine if there are any joins.</span></span><br><span class="line"><span class="keyword">if</span> (count((<span class="keyword">array</span>) $builder-&gt;getQuery()-&gt;joins) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>很好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasJoins())</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Do-not-put-JS-and-CSS-in-Blade-templates-and-do-not-put-any-HTML-in-PHP-classes"><a href="#Do-not-put-JS-and-CSS-in-Blade-templates-and-do-not-put-any-HTML-in-PHP-classes" class="headerlink" title="Do not put JS and CSS in Blade templates and do not put any HTML in PHP classes"></a><strong>Do not put JS and CSS in Blade templates and do not put any HTML in PHP classes</strong></h3><h3 id="Blade模板中不要加JS和CSS，不要在PHP类中加HTML"><a href="#Blade模板中不要加JS和CSS，不要在PHP类中加HTML" class="headerlink" title="Blade模板中不要加JS和CSS，不要在PHP类中加HTML"></a>Blade模板中不要加JS和CSS，不要在PHP类中加HTML</h3><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let article = `&#123;&#123; json_encode($article) &#125;&#125;`;</span><br></pre></td></tr></table></figure><p>好一些的做法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">"article"</span> type=<span class="string">"hidden"</span> value=<span class="string">"@json($article)"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Or</span></span><br><span class="line"></span><br><span class="line">&lt;button class="js-fav-article" data-article="@json($article)"&gt;&#123;&#123; $article-&gt;name &#125;&#125;&lt;button&gt;</span><br></pre></td></tr></table></figure><p>在Javascript文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> article = $(<span class="string">'#article'</span>).val();</span><br></pre></td></tr></table></figure><p>最好用专门的代码在PHP端包装数据，在JS端解析数据</p><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Use-config-and-language-files-constants-instead-of-text-in-the-code"><a href="#Use-config-and-language-files-constants-instead-of-text-in-the-code" class="headerlink" title="Use config and language files, constants instead of text in the code"></a><strong>Use config and language files, constants instead of text in the code</strong></h3><h3 id="使用配置、语言文件和定义常量来取代代码中的文字"><a href="#使用配置、语言文件和定义常量来取代代码中的文字" class="headerlink" title="使用配置、语言文件和定义常量来取代代码中的文字"></a>使用配置、语言文件和定义常量来取代代码中的文字</h3><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isNormal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $article-&gt;type === <span class="string">'normal'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> back()-&gt;with(<span class="string">'message'</span>, <span class="string">'Your article has been added!'</span>);</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isNormal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $article-&gt;type === Article::TYPE_NORMAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> back()-&gt;with(<span class="string">'message'</span>, __(<span class="string">'app.article_added'</span>));</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Use-standard-Laravel-tools-accepted-by-community"><a href="#Use-standard-Laravel-tools-accepted-by-community" class="headerlink" title="Use standard Laravel tools accepted by community"></a><strong>Use standard Laravel tools accepted by community</strong></h3><h3 id="使用被社区广为接受的标准Laravel工具"><a href="#使用被社区广为接受的标准Laravel工具" class="headerlink" title="使用被社区广为接受的标准Laravel工具"></a>使用被社区广为接受的标准Laravel工具</h3><p>不要任意使用第三方的包和工具，要选用被社区广为接受的标准Laravel工具，不要坑你的客户</p><table><thead><tr><th>任务</th><th>标准工具</th><th>第三方工具</th></tr></thead><tbody><tr><td>Authorization</td><td>Policies</td><td>Entrust, Sentinel and other packages</td></tr><tr><td>Compiling assets</td><td>Laravel Mix</td><td>Grunt, Gulp, 3rd party packages</td></tr><tr><td>Development Environment</td><td>Homestead</td><td>Docker</td></tr><tr><td>Deployment</td><td>Laravel Forge</td><td>Deployer and other solutions</td></tr><tr><td>Unit testing</td><td>PHPUnit, Mockery</td><td>Phpspec</td></tr><tr><td>Browser testing</td><td>Laravel Dusk</td><td>Codeception</td></tr><tr><td>DB</td><td>Eloquent</td><td>SQL, Doctrine</td></tr><tr><td>Templates</td><td>Blade</td><td>Twig</td></tr><tr><td>Working with data</td><td>Laravel collections</td><td>Arrays</td></tr><tr><td>Form validation</td><td>Request classes</td><td>3rd party packages, validation in controller</td></tr><tr><td>Authentication</td><td>Built-in</td><td>3rd party packages, your own solution</td></tr><tr><td>API authentication</td><td>Laravel Passport</td><td>3rd party JWT and OAuth packages</td></tr><tr><td>Creating API</td><td>Built-in</td><td>Dingo API and similar packages</td></tr><tr><td>Working with DB structure</td><td>Migrations</td><td>Working with DB structure directly</td></tr><tr><td>Localization</td><td>Built-in</td><td>3rd party packages</td></tr><tr><td>Realtime user interfaces</td><td>Laravel Echo, Pusher</td><td>3rd party packages and working with WebSockets directly</td></tr><tr><td>Generating testing data</td><td>Seeder classes, Model Factories, Faker</td><td>Creating testing data manually</td></tr><tr><td>Task scheduling</td><td>Laravel Task Scheduler</td><td>Scripts and 3rd party packages</td></tr><tr><td>DB</td><td>MySQL, PostgreSQL, SQLite, SQL Server</td><td>MongoDB</td></tr></tbody></table><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Follow-Laravel-naming-conventions"><a href="#Follow-Laravel-naming-conventions" class="headerlink" title="Follow Laravel naming conventions"></a><strong>Follow Laravel naming conventions</strong></h3><h3 id="遵循Laravel命名规范"><a href="#遵循Laravel命名规范" class="headerlink" title="遵循Laravel命名规范"></a>遵循Laravel命名规范</h3><p>遵循PSR规范 <a href="http://www.php-fig.org/psr/psr-2/" target="_blank" rel="noopener">PSR标准</a></p><p>同时遵循Laravel社区接受的命名传统</p><table><thead><tr><th>称呼什么</th><th>怎么样的</th><th>好的</th><th>不好的</th></tr></thead><tbody><tr><td>Controller</td><td>singular</td><td>ArticleController</td><td><del>ArticlesController</del></td></tr><tr><td>Route</td><td>plural</td><td>articles/1</td><td><del>article/1</del></td></tr><tr><td>Named route</td><td>snake_case with dot notation</td><td>users.show_active</td><td><del>users.show-active, show-active-users</del></td></tr><tr><td>Model</td><td>singular</td><td>User</td><td><del>Users</del></td></tr><tr><td>hasOne or belongsTo relationship</td><td>singular</td><td>articleComment</td><td><del>articleComments, article_comment</del></td></tr><tr><td>All other relationships</td><td>plural</td><td>articleComments</td><td><del>articleComment, article_comments</del></td></tr><tr><td>Table</td><td>plural</td><td>article_comments</td><td><del>article_comment, articleComments</del></td></tr><tr><td>Pivot table</td><td>singular model names in alphabetical order</td><td>article_user</td><td><del>user_article, articles_users</del></td></tr><tr><td>Table column</td><td>snake_case without model name</td><td>meta_title</td><td><del>MetaTitle; article_meta_title</del></td></tr><tr><td>Model property</td><td>snake_case</td><td>$model-&gt;created_at</td><td><del>$model-&gt;createdAt</del></td></tr><tr><td>Foreign key</td><td>singular model name with _id suffix</td><td>article_id</td><td><del>ArticleId, id_article, articles_id</del></td></tr><tr><td>Primary key</td><td>-</td><td>id</td><td><del>custom_id</del></td></tr><tr><td>Migration</td><td>-</td><td>2017_01_01_000000_create_articles_table</td><td><del>2017_01_01_000000_articles</del></td></tr><tr><td>Method</td><td>camelCase</td><td>getAll</td><td><del>get_all</del></td></tr><tr><td>Method in resource controller</td><td><a href="https://laravel.com/docs/master/controllers#resource-controllers" target="_blank" rel="noopener">table</a></td><td>store</td><td><del>saveArticle</del></td></tr><tr><td>Method in test class</td><td>camelCase</td><td>testGuestCannotSeeArticle</td><td><del>test_guest_cannot_see_article</del></td></tr><tr><td>Variable</td><td>camelCase</td><td>$articlesWithAuthor</td><td><del>$articles_with_author</del></td></tr><tr><td>Collection</td><td>descriptive, plural</td><td>$activeUsers = User::active()-&gt;get()</td><td><del>$active, $data</del></td></tr><tr><td>Object</td><td>descriptive, singular</td><td>$activeUser = User::active()-&gt;first()</td><td><del>$users, $obj</del></td></tr><tr><td>Config and language files index</td><td>snake_case</td><td>articles_enabled</td><td><del>ArticlesEnabled; articles-enabled</del></td></tr><tr><td>View</td><td>snake_case</td><td>show_filtered.blade.php</td><td><del>showFiltered.blade.php, show-filtered.blade.php</del></td></tr><tr><td>Config</td><td>snake_case</td><td>google_calendar.php</td><td><del>googleCalendar.php, google-calendar.php</del></td></tr><tr><td>Contract (interface)</td><td>adjective or noun</td><td>Authenticatable</td><td><del>AuthenticationInterface, IAuthentication</del></td></tr><tr><td>Trait</td><td>adjective</td><td>Notifiable</td><td><del>NotificationTrait</del></td></tr></tbody></table><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Use-shorter-and-more-readable-syntax-where-possible"><a href="#Use-shorter-and-more-readable-syntax-where-possible" class="headerlink" title="Use shorter and more readable syntax where possible"></a><strong>Use shorter and more readable syntax where possible</strong></h3><h3 id="在可能的地方使用更短可读性更强的句法"><a href="#在可能的地方使用更短可读性更强的句法" class="headerlink" title="在可能的地方使用更短可读性更强的句法"></a>在可能的地方使用更短可读性更强的句法</h3><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$request-&gt;session()-&gt;get(<span class="string">'cart'</span>);</span><br><span class="line">$request-&gt;input(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session(<span class="string">'cart'</span>);</span><br><span class="line">$request-&gt;name;</span><br></pre></td></tr></table></figure><p>更多的例子：</p><table><thead><tr><th>一般的句法</th><th>短小精悍的句法</th></tr></thead><tbody><tr><td><code>Session::get(&#39;cart&#39;)</code></td><td><code>session(&#39;cart&#39;)</code></td></tr><tr><td><code>$request-&gt;session()-&gt;get(&#39;cart&#39;)</code></td><td><code>session(&#39;cart&#39;)</code></td></tr><tr><td><code>Session::put(&#39;cart&#39;, $data)</code></td><td><code>session([&#39;cart&#39; =&gt; $data])</code></td></tr><tr><td><code>$request-&gt;input(&#39;name&#39;), Request::get(&#39;name&#39;)</code></td><td><code>$request-&gt;name, request(&#39;name&#39;)</code></td></tr><tr><td><code>return Redirect::back()</code></td><td><code>return back()</code></td></tr><tr><td><code>is_null($object-&gt;relation) ? null : $object-&gt;relation-&gt;id</code></td><td><code>optional($object-&gt;relation)-&gt;id</code></td></tr><tr><td><code>return view(&#39;index&#39;)-&gt;with(&#39;title&#39;, $title)-&gt;with(&#39;client&#39;, $client)</code></td><td><code>return view(&#39;index&#39;, compact(&#39;title&#39;, &#39;client&#39;))</code></td></tr><tr><td><code>$request-&gt;has(&#39;value&#39;) ? $request-&gt;value : &#39;default&#39;;</code></td><td><code>$request-&gt;get(&#39;value&#39;, &#39;default&#39;)</code></td></tr><tr><td><code>Carbon::now(), Carbon::today()</code></td><td><code>now(), today()</code></td></tr><tr><td><code>App::make(&#39;Class&#39;)</code></td><td><code>app(&#39;Class&#39;)</code></td></tr><tr><td><code>-&gt;where(&#39;column&#39;, &#39;=&#39;, 1)</code></td><td><code>-&gt;where(&#39;column&#39;, 1)</code></td></tr><tr><td><code>-&gt;orderBy(&#39;created_at&#39;, &#39;desc&#39;)</code></td><td><code>-&gt;latest()</code></td></tr><tr><td><code>-&gt;orderBy(&#39;age&#39;, &#39;desc&#39;)</code></td><td><code>-&gt;latest(&#39;age&#39;)</code></td></tr><tr><td><code>-&gt;orderBy(&#39;created_at&#39;, &#39;asc&#39;)</code></td><td><code>-&gt;oldest()</code></td></tr><tr><td><code>-&gt;select(&#39;id&#39;, &#39;name&#39;)-&gt;get()</code></td><td><code>-&gt;get([&#39;id&#39;, &#39;name&#39;])</code></td></tr><tr><td><code>-&gt;first()-&gt;name</code></td><td><code>-&gt;value(&#39;name&#39;)</code></td></tr></tbody></table><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Use-IoC-container-or-facades-instead-of-new-Class"><a href="#Use-IoC-container-or-facades-instead-of-new-Class" class="headerlink" title="Use IoC container or facades instead of new Class"></a><strong>Use IoC container or facades instead of new Class</strong></h3><h3 id="用控制反转容器或门面来取代new一个新的对象"><a href="#用控制反转容器或门面来取代new一个新的对象" class="headerlink" title="用控制反转容器或门面来取代new一个新的对象"></a>用控制反转容器或门面来取代new一个新的对象</h3><p>new一个新的对象的这种做法造成了类与复杂测试之间的强耦合，尽量使用控制反转或门面</p><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User;</span><br><span class="line">$user-&gt;create($request-&gt;all());</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;user-&gt;create($request-&gt;all());</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Do-not-get-data-from-the-env-file-directly"><a href="#Do-not-get-data-from-the-env-file-directly" class="headerlink" title="Do not get data from the .env file directly"></a><strong>Do not get data from the <code>.env</code> file directly</strong></h3><h3 id="不要直接从-env文件中读取数据"><a href="#不要直接从-env文件中读取数据" class="headerlink" title="不要直接从.env文件中读取数据"></a>不要直接从.env文件中读取数据</h3><p>把.env文件中的数据先传递到config文件中，再在应用中通过config()帮助方法使用</p><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$apiKey = env(<span class="string">'API_KEY'</span>);</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/api.php</span></span><br><span class="line"><span class="string">'key'</span> =&gt; env(<span class="string">'API_KEY'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the data</span></span><br><span class="line">$apiKey = config(<span class="string">'api.key'</span>);</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Store-dates-in-the-standard-format-Use-accessors-and-mutators-to-modify-date-format"><a href="#Store-dates-in-the-standard-format-Use-accessors-and-mutators-to-modify-date-format" class="headerlink" title="Store dates in the standard format. Use accessors and mutators to modify date format"></a><strong>Store dates in the standard format. Use accessors and mutators to modify date format</strong></h3><h3 id="以标准格式存储数据，使用存取器和变异器来修改日期格式"><a href="#以标准格式存储数据，使用存取器和变异器来修改日期格式" class="headerlink" title="以标准格式存储数据，使用存取器和变异器来修改日期格式"></a>以标准格式存储数据，使用存取器和变异器来修改日期格式</h3><p>不好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; Carbon::createFromFormat(<span class="string">'Y-d-m H-i'</span>, $object-&gt;ordered_at)-&gt;toDateString() &#125;&#125;</span><br><span class="line">&#123;&#123; Carbon::createFromFormat(<span class="string">'Y-d-m H-i'</span>, $object-&gt;ordered_at)-&gt;format(<span class="string">'m-d'</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>好的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Model</span></span><br><span class="line"><span class="keyword">protected</span> $dates = [<span class="string">'ordered_at'</span>, <span class="string">'created_at'</span>, <span class="string">'updated_at'</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSomeDateAttribute</span><span class="params">($date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $date-&gt;format(<span class="string">'m-d'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// View</span></span><br><span class="line">&#123;&#123; $object-&gt;ordered_at-&gt;toDateString() &#125;&#125;</span><br><span class="line">&#123;&#123; $object-&gt;ordered_at-&gt;some_date &#125;&#125;</span><br></pre></td></tr></table></figure><p><a href="#contents">🔝 回到顶部</a></p><h3 id="Other-good-practices"><a href="#Other-good-practices" class="headerlink" title="Other good practices"></a><strong>Other good practices</strong></h3><h3 id="其他好的实践"><a href="#其他好的实践" class="headerlink" title="其他好的实践"></a>其他好的实践</h3><p>不要在路径文件里写任何的逻辑</p><p>Blade模板中尽量不要使用原生的PHP语法</p><p><a href="#contents">🔝 回到顶部</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;翻译自：&lt;a href=&quot;https://github.com/alexeymezenin/laravel-best-practices&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/alexeymezenin/lar
      
    
    </summary>
    
    
      <category term="Laravel" scheme="http://blog.guoguojia.net/tags/Laravel/"/>
    
      <category term="实践" scheme="http://blog.guoguojia.net/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>这是第一篇测试文章</title>
    <link href="http://blog.guoguojia.net/2019/01/01/first-post/"/>
    <id>http://blog.guoguojia.net/2019/01/01/first-post/</id>
    <published>2019-01-01T08:56:33.000Z</published>
    <updated>2019-01-01T08:56:33.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="这里是第一篇文章"><a href="#这里是第一篇文章" class="headerlink" title="这里是第一篇文章"></a>这里是第一篇文章</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;h3 id=&quot;这里是第一篇文章&quot;&gt;&lt;a href=&quot;#这里是第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;这里是第一篇文章&quot;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.guoguojia.net/categories/Hexo/"/>
    
    
      <category term="测试" scheme="http://blog.guoguojia.net/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="MD" scheme="http://blog.guoguojia.net/tags/MD/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.guoguojia.net/2019/01/01/hello-world/"/>
    <id>http://blog.guoguojia.net/2019/01/01/hello-world/</id>
    <published>2019-01-01T08:41:05.054Z</published>
    <updated>2019-01-01T08:41:05.054Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
